/**
 * @author NarayanaRaju
 *
 */
class Solution {
    public String longestPalindrome(String s) {
        if(isPalindrome(s)) return s;
        int i=0,j=0;
        int maxLength=1;
        String longestPalindrome = s.substring(0,1);
        int len = s.length();
        for(i=0;i<len;i++){
            for(j = 1; i-j >=0 && i+j <len; j++){
                if(s.charAt(i-j) != s.charAt(i+j)){
                    break;
                }
                int newLength = 2*j+1;
                if(newLength > maxLength){
                    maxLength = newLength;
                    longestPalindrome = s.substring(i-j,i+j+1);
                }
            }
        }
        for(i=0;i<len;i++){
            for(j = 1; i-j+1 >=0 && i+j <len; j++){
                if(s.charAt(i-j+1) != s.charAt(i+j)){
                    break;
                }
                int newLength = 2*j;
                if(newLength > maxLength){
                    maxLength = newLength;
                    longestPalindrome = s.substring(i-j+1,i+j+1);
                }
            }
        }
        return longestPalindrome;
        
    }
    public Boolean isPalindrome(String str){
        StringBuilder str2 = new StringBuilder(str);
        return str.equals(str2.reverse().toString());
    }
}